["\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec2 u_xlat2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump float u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nfloat u_xlat16;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_28;\nfloat u_xlat30;\nfloat u_xlat31;\nfloat u_xlat45;\nfloat u_xlat46;\nfloat u_xlat47;\nbool u_xlatb47;\nmediump float u_xlat16_49;\nmediump float u_xlat16_56;\nmediump float u_xlat16_57;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * u_xlat0.xyz;\n    u_xlat46 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat2.x = sqrt(u_xlat46);\n    u_xlat46 = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat2.y = sqrt(u_xlat46);\n    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;\n    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;\n    u_xlat3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_4.xxx) + (-u_xlat1.xyz);\n    u_xlatb47 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb47){\n        u_xlat47 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat47 = inversesqrt(u_xlat47);\n        u_xlat5.xyz = vec3(u_xlat47) * u_xlat16_4.xyz;\n        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat47 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat47 = min(u_xlat6.z, u_xlat47);\n        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat47) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9 = u_xlat10_5.w + -1.0;\n    u_xlat16_9 = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;\n    u_xlat16_9 = u_xlat16_9 * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat10_5.xyz * vec3(u_xlat16_9);\n    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb47){\n        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb47){\n            u_xlat47 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat47 = inversesqrt(u_xlat47);\n            u_xlat6.xyz = vec3(u_xlat47) * u_xlat16_4.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat47 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat47 = min(u_xlat7.z, u_xlat47);\n            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat47) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = vec3(u_xlat16_9) * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat47 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat47 = inversesqrt(u_xlat47);\n    u_xlat5.xyz = vec3(u_xlat47) * vs_TEXCOORD1.xyz;\n    u_xlat16_11.xyz = u_xlat10_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_9 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_12.xyz = u_xlat3.xyz * vec3(u_xlat16_9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;\n    u_xlat45 = dot(u_xlat5.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16 = dot(u_xlat5.xyz, u_xlat0.xyz);\n    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_56 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_56 = u_xlat0.x * u_xlat16_56;\n    u_xlat16_56 = u_xlat16_56 * u_xlat46 + -0.5;\n    u_xlat16_57 = (-u_xlat1.x) + 1.0;\n    u_xlat16_13 = u_xlat16_57 * u_xlat16_57;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_57 = u_xlat16_57 * u_xlat16_13;\n    u_xlat16_57 = u_xlat16_56 * u_xlat16_57 + 1.0;\n    u_xlat16_13 = -abs(u_xlat45) + 1.0;\n    u_xlat16_28.x = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_28.x = u_xlat16_28.x * u_xlat16_28.x;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_28.x;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_13 + 1.0;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_57;\n    u_xlat15 = u_xlat1.x * u_xlat16_56;\n    u_xlat30 = u_xlat46 * u_xlat46;\n    u_xlat30 = max(u_xlat30, 0.00200000009);\n    u_xlat31 = (-u_xlat30) + 1.0;\n    u_xlat2.x = abs(u_xlat45) * u_xlat31 + u_xlat30;\n    u_xlat31 = u_xlat1.x * u_xlat31 + u_xlat30;\n    u_xlat45 = abs(u_xlat45) * u_xlat31;\n    u_xlat45 = u_xlat1.x * u_xlat2.x + u_xlat45;\n    u_xlat45 = u_xlat45 + 9.99999975e-06;\n    u_xlat45 = 0.5 / u_xlat45;\n    u_xlat31 = u_xlat30 * u_xlat30;\n    u_xlat2.x = u_xlat16 * u_xlat31 + (-u_xlat16);\n    u_xlat16 = u_xlat2.x * u_xlat16 + 1.0;\n    u_xlat31 = u_xlat31 * 0.318309873;\n    u_xlat16 = u_xlat16 * u_xlat16 + 1.00000001e-07;\n    u_xlat16 = u_xlat31 / u_xlat16;\n    u_xlat45 = u_xlat45 * u_xlat16;\n    u_xlat45 = u_xlat45 * 3.14159274;\n    u_xlat45 = max(u_xlat45, 9.99999975e-05);\n    u_xlat45 = sqrt(u_xlat45);\n    u_xlat45 = u_xlat1.x * u_xlat45;\n    u_xlat30 = u_xlat30 * u_xlat46;\n    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;\n    u_xlat16_56 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb1 = u_xlat16_56!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat45 = u_xlat45 * u_xlat1.x;\n    u_xlat16_9 = (-u_xlat16_9) + _Glossiness;\n    u_xlat16_9 = u_xlat16_9 + 1.0;\n    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);\n    u_xlat16_28.xyz = vec3(u_xlat15) * _LightColor0.xyz;\n    u_xlat1.xyz = vec3(u_xlat45) * _LightColor0.xyz;\n    u_xlat16_56 = (-u_xlat0.x) + 1.0;\n    u_xlat16_57 = u_xlat16_56 * u_xlat16_56;\n    u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_57;\n    u_xlat16_14.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_56) + u_xlat16_11.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_14.xyz;\n    u_xlat0.xyw = u_xlat16_12.xyz * u_xlat16_28.xyz + u_xlat0.xyw;\n    u_xlat16_24.xyz = u_xlat16_24.xyz * vec3(u_xlat30);\n    u_xlat16_12.xyz = (-u_xlat16_11.xyz) + vec3(u_xlat16_9);\n    u_xlat16_11.xyz = vec3(u_xlat16_13) * u_xlat16_12.xyz + u_xlat16_11.xyz;\n    u_xlat0.xyz = u_xlat16_24.xyz * u_xlat16_11.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube1;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec2 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump float u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat15;\nfloat u_xlat16;\nvec3 u_xlat24;\nmediump vec3 u_xlat16_24;\nmediump vec3 u_xlat16_28;\nfloat u_xlat30;\nfloat u_xlat31;\nfloat u_xlat45;\nfloat u_xlat46;\nfloat u_xlat47;\nbool u_xlatb47;\nmediump float u_xlat16_49;\nmediump float u_xlat16_56;\nmediump float u_xlat16_57;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat1.xyz = vec3(u_xlat45) * u_xlat0.xyz;\n    u_xlat46 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat2.x = sqrt(u_xlat46);\n    u_xlat46 = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat2.y = sqrt(u_xlat46);\n    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;\n    u_xlat16_2.xyz = texture(_MainTex, u_xlat2.xy).xyz;\n    u_xlat3.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat46 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_4.xxx) + (-u_xlat1.xyz);\n    u_xlatb47 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb47){\n        u_xlat47 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat47 = inversesqrt(u_xlat47);\n        u_xlat5.xyz = vec3(u_xlat47) * u_xlat16_4.xyz;\n        u_xlat6.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat47 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat47 = min(u_xlat6.z, u_xlat47);\n        u_xlat6.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat47) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_49 = (-u_xlat46) * 0.699999988 + 1.70000005;\n    u_xlat16_49 = u_xlat46 * u_xlat16_49;\n    u_xlat16_49 = u_xlat16_49 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_49);\n    u_xlat16_9 = u_xlat16_5.w + -1.0;\n    u_xlat16_9 = unity_SpecCube0_HDR.w * u_xlat16_9 + 1.0;\n    u_xlat16_9 = u_xlat16_9 * unity_SpecCube0_HDR.x;\n    u_xlat16_24.xyz = u_xlat16_5.xyz * vec3(u_xlat16_9);\n    u_xlatb47 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb47){\n        u_xlatb47 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb47){\n            u_xlat47 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat47 = inversesqrt(u_xlat47);\n            u_xlat6.xyz = vec3(u_xlat47) * u_xlat16_4.xyz;\n            u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat47 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat47 = min(u_xlat7.z, u_xlat47);\n            u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat47) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_49);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = vec3(u_xlat16_9) * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat24.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_24.xyz = u_xlat24.xyz;\n    }\n    u_xlat47 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat47 = inversesqrt(u_xlat47);\n    u_xlat5.xyz = vec3(u_xlat47) * vs_TEXCOORD1.xyz;\n    u_xlat16_11.xyz = u_xlat16_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_9 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_12.xyz = u_xlat3.xyz * vec3(u_xlat16_9);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat45) + _WorldSpaceLightPos0.xyz;\n    u_xlat45 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat45 = max(u_xlat45, 0.00100000005);\n    u_xlat45 = inversesqrt(u_xlat45);\n    u_xlat0.xyz = vec3(u_xlat45) * u_xlat0.xyz;\n    u_xlat45 = dot(u_xlat5.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat5.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16 = dot(u_xlat5.xyz, u_xlat0.xyz);\n    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_56 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_56 = u_xlat0.x * u_xlat16_56;\n    u_xlat16_56 = u_xlat16_56 * u_xlat46 + -0.5;\n    u_xlat16_57 = (-u_xlat1.x) + 1.0;\n    u_xlat16_13 = u_xlat16_57 * u_xlat16_57;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_57 = u_xlat16_57 * u_xlat16_13;\n    u_xlat16_57 = u_xlat16_56 * u_xlat16_57 + 1.0;\n    u_xlat16_13 = -abs(u_xlat45) + 1.0;\n    u_xlat16_28.x = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_28.x = u_xlat16_28.x * u_xlat16_28.x;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_28.x;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_13 + 1.0;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_57;\n    u_xlat15 = u_xlat1.x * u_xlat16_56;\n    u_xlat30 = u_xlat46 * u_xlat46;\n    u_xlat30 = max(u_xlat30, 0.00200000009);\n    u_xlat31 = (-u_xlat30) + 1.0;\n    u_xlat2.x = abs(u_xlat45) * u_xlat31 + u_xlat30;\n    u_xlat31 = u_xlat1.x * u_xlat31 + u_xlat30;\n    u_xlat45 = abs(u_xlat45) * u_xlat31;\n    u_xlat45 = u_xlat1.x * u_xlat2.x + u_xlat45;\n    u_xlat45 = u_xlat45 + 9.99999975e-06;\n    u_xlat45 = 0.5 / u_xlat45;\n    u_xlat31 = u_xlat30 * u_xlat30;\n    u_xlat2.x = u_xlat16 * u_xlat31 + (-u_xlat16);\n    u_xlat16 = u_xlat2.x * u_xlat16 + 1.0;\n    u_xlat31 = u_xlat31 * 0.318309873;\n    u_xlat16 = u_xlat16 * u_xlat16 + 1.00000001e-07;\n    u_xlat16 = u_xlat31 / u_xlat16;\n    u_xlat45 = u_xlat45 * u_xlat16;\n    u_xlat45 = u_xlat45 * 3.14159274;\n    u_xlat45 = max(u_xlat45, 9.99999975e-05);\n    u_xlat45 = sqrt(u_xlat45);\n    u_xlat45 = u_xlat1.x * u_xlat45;\n    u_xlat30 = u_xlat30 * u_xlat46;\n    u_xlat30 = (-u_xlat30) * 0.280000001 + 1.0;\n    u_xlat16_56 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb1 = u_xlat16_56!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat45 = u_xlat45 * u_xlat1.x;\n    u_xlat16_9 = (-u_xlat16_9) + _Glossiness;\n    u_xlat16_9 = u_xlat16_9 + 1.0;\n    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);\n    u_xlat16_28.xyz = vec3(u_xlat15) * _LightColor0.xyz;\n    u_xlat1.xyz = vec3(u_xlat45) * _LightColor0.xyz;\n    u_xlat16_56 = (-u_xlat0.x) + 1.0;\n    u_xlat16_57 = u_xlat16_56 * u_xlat16_56;\n    u_xlat16_57 = u_xlat16_57 * u_xlat16_57;\n    u_xlat16_56 = u_xlat16_56 * u_xlat16_57;\n    u_xlat16_14.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_14.xyz = u_xlat16_14.xyz * vec3(u_xlat16_56) + u_xlat16_11.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_14.xyz;\n    u_xlat0.xyw = u_xlat16_12.xyz * u_xlat16_28.xyz + u_xlat0.xyw;\n    u_xlat16_24.xyz = u_xlat16_24.xyz * vec3(u_xlat30);\n    u_xlat16_12.xyz = (-u_xlat16_11.xyz) + vec3(u_xlat16_9);\n    u_xlat16_11.xyz = vec3(u_xlat16_13) * u_xlat16_12.xyz + u_xlat16_11.xyz;\n    u_xlat0.xyz = u_xlat16_24.xyz * u_xlat16_11.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec2 u_xlat2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec4 u_xlat5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nfloat u_xlat17;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump vec3 u_xlat16_30;\nfloat u_xlat32;\nfloat u_xlat33;\nfloat u_xlat48;\nfloat u_xlat49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat1.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat49 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat2.x = sqrt(u_xlat49);\n    u_xlat49 = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat2.y = sqrt(u_xlat49);\n    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;\n    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;\n    u_xlat3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat49 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_4.xxx) + (-u_xlat1.xyz);\n    u_xlat5.xyz = vs_TEXCOORD1.xyz;\n    u_xlat5.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat5);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_6.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat5.xyz = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb50 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb50){\n        u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat50 = inversesqrt(u_xlat50);\n        u_xlat7.xyz = vec3(u_xlat50) * u_xlat16_4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat50 = min(u_xlat8.z, u_xlat50);\n        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat50) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_52 = (-u_xlat49) * 0.699999988 + 1.70000005;\n    u_xlat16_52 = u_xlat49 * u_xlat16_52;\n    u_xlat16_52 = u_xlat16_52 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_52);\n    u_xlat16_11 = u_xlat10_6.w + -1.0;\n    u_xlat16_11 = unity_SpecCube0_HDR.w * u_xlat16_11 + 1.0;\n    u_xlat16_11 = u_xlat16_11 * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat10_6.xyz * vec3(u_xlat16_11);\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat7.xyz = vec3(u_xlat50) * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat50 = min(u_xlat8.z, u_xlat50);\n            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat50) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_52);\n        u_xlat16_12.x = u_xlat10_4.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_4.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = vec3(u_xlat16_11) * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat50 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat50 = inversesqrt(u_xlat50);\n    u_xlat7.xyz = vec3(u_xlat50) * vs_TEXCOORD1.xyz;\n    u_xlat16_12.xyz = u_xlat10_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_11 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_13.xyz = u_xlat3.xyz * vec3(u_xlat16_11);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat0.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat48 = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat17 = dot(u_xlat7.xyz, u_xlat0.xyz);\n    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_60 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_60 = u_xlat0.x * u_xlat16_60;\n    u_xlat16_60 = u_xlat16_60 * u_xlat49 + -0.5;\n    u_xlat16_61 = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_14;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_61 + 1.0;\n    u_xlat16_14 = -abs(u_xlat48) + 1.0;\n    u_xlat16_30.x = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_30.x = u_xlat16_30.x * u_xlat16_30.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_30.x;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_14 + 1.0;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_61;\n    u_xlat16 = u_xlat1.x * u_xlat16_60;\n    u_xlat32 = u_xlat49 * u_xlat49;\n    u_xlat32 = max(u_xlat32, 0.00200000009);\n    u_xlat33 = (-u_xlat32) + 1.0;\n    u_xlat2.x = abs(u_xlat48) * u_xlat33 + u_xlat32;\n    u_xlat33 = u_xlat1.x * u_xlat33 + u_xlat32;\n    u_xlat48 = abs(u_xlat48) * u_xlat33;\n    u_xlat48 = u_xlat1.x * u_xlat2.x + u_xlat48;\n    u_xlat48 = u_xlat48 + 9.99999975e-06;\n    u_xlat48 = 0.5 / u_xlat48;\n    u_xlat33 = u_xlat32 * u_xlat32;\n    u_xlat2.x = u_xlat17 * u_xlat33 + (-u_xlat17);\n    u_xlat17 = u_xlat2.x * u_xlat17 + 1.0;\n    u_xlat33 = u_xlat33 * 0.318309873;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat17 = u_xlat33 / u_xlat17;\n    u_xlat48 = u_xlat48 * u_xlat17;\n    u_xlat48 = u_xlat48 * 3.14159274;\n    u_xlat48 = max(u_xlat48, 9.99999975e-05);\n    u_xlat48 = sqrt(u_xlat48);\n    u_xlat48 = u_xlat1.x * u_xlat48;\n    u_xlat32 = u_xlat32 * u_xlat49;\n    u_xlat32 = (-u_xlat32) * 0.280000001 + 1.0;\n    u_xlat16_60 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_60!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat48 = u_xlat48 * u_xlat1.x;\n    u_xlat16_11 = (-u_xlat16_11) + _Glossiness;\n    u_xlat16_11 = u_xlat16_11 + 1.0;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_30.xyz = _LightColor0.xyz * vec3(u_xlat16) + u_xlat5.xyz;\n    u_xlat1.xyz = vec3(u_xlat48) * _LightColor0.xyz;\n    u_xlat16_60 = (-u_xlat0.x) + 1.0;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_60;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_61;\n    u_xlat16_15.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_60) + u_xlat16_12.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_15.xyz;\n    u_xlat0.xyw = u_xlat16_13.xyz * u_xlat16_30.xyz + u_xlat0.xyw;\n    u_xlat16_27.xyz = u_xlat16_27.xyz * vec3(u_xlat32);\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + vec3(u_xlat16_11);\n    u_xlat16_12.xyz = vec3(u_xlat16_14) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_27.xyz * u_xlat16_12.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube1;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec2 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nvec4 u_xlat5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nfloat u_xlat17;\nvec3 u_xlat27;\nmediump vec3 u_xlat16_27;\nmediump vec3 u_xlat16_30;\nfloat u_xlat32;\nfloat u_xlat33;\nfloat u_xlat48;\nfloat u_xlat49;\nfloat u_xlat50;\nbool u_xlatb50;\nmediump float u_xlat16_52;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat1.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat49 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat2.x = sqrt(u_xlat49);\n    u_xlat49 = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat2.y = sqrt(u_xlat49);\n    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;\n    u_xlat16_2.xyz = texture(_MainTex, u_xlat2.xy).xyz;\n    u_xlat3.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat49 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_4.xxx) + (-u_xlat1.xyz);\n    u_xlat5.xyz = vs_TEXCOORD1.xyz;\n    u_xlat5.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat5);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat5);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat5);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = log2(u_xlat16_6.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat5.xyz = exp2(u_xlat5.xyz);\n    u_xlat5.xyz = u_xlat5.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat5.xyz = max(u_xlat5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb50 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb50){\n        u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat50 = inversesqrt(u_xlat50);\n        u_xlat7.xyz = vec3(u_xlat50) * u_xlat16_4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat50 = min(u_xlat8.z, u_xlat50);\n        u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat50) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_52 = (-u_xlat49) * 0.699999988 + 1.70000005;\n    u_xlat16_52 = u_xlat49 * u_xlat16_52;\n    u_xlat16_52 = u_xlat16_52 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_52);\n    u_xlat16_11 = u_xlat16_6.w + -1.0;\n    u_xlat16_11 = unity_SpecCube0_HDR.w * u_xlat16_11 + 1.0;\n    u_xlat16_11 = u_xlat16_11 * unity_SpecCube0_HDR.x;\n    u_xlat16_27.xyz = u_xlat16_6.xyz * vec3(u_xlat16_11);\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat7.xyz = vec3(u_xlat50) * u_xlat16_4.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat50 = min(u_xlat8.z, u_xlat50);\n            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat50) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_52);\n        u_xlat16_12.x = u_xlat16_4.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_4.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = vec3(u_xlat16_11) * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat27.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_27.xyz = u_xlat27.xyz;\n    }\n    u_xlat50 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat50 = inversesqrt(u_xlat50);\n    u_xlat7.xyz = vec3(u_xlat50) * vs_TEXCOORD1.xyz;\n    u_xlat16_12.xyz = u_xlat16_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_11 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_13.xyz = u_xlat3.xyz * vec3(u_xlat16_11);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat0.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat48 = dot(u_xlat7.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat7.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat17 = dot(u_xlat7.xyz, u_xlat0.xyz);\n    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_60 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_60 = u_xlat0.x * u_xlat16_60;\n    u_xlat16_60 = u_xlat16_60 * u_xlat49 + -0.5;\n    u_xlat16_61 = (-u_xlat1.x) + 1.0;\n    u_xlat16_14 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_14;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_61 + 1.0;\n    u_xlat16_14 = -abs(u_xlat48) + 1.0;\n    u_xlat16_30.x = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_30.x = u_xlat16_30.x * u_xlat16_30.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_30.x;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_14 + 1.0;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_61;\n    u_xlat16 = u_xlat1.x * u_xlat16_60;\n    u_xlat32 = u_xlat49 * u_xlat49;\n    u_xlat32 = max(u_xlat32, 0.00200000009);\n    u_xlat33 = (-u_xlat32) + 1.0;\n    u_xlat2.x = abs(u_xlat48) * u_xlat33 + u_xlat32;\n    u_xlat33 = u_xlat1.x * u_xlat33 + u_xlat32;\n    u_xlat48 = abs(u_xlat48) * u_xlat33;\n    u_xlat48 = u_xlat1.x * u_xlat2.x + u_xlat48;\n    u_xlat48 = u_xlat48 + 9.99999975e-06;\n    u_xlat48 = 0.5 / u_xlat48;\n    u_xlat33 = u_xlat32 * u_xlat32;\n    u_xlat2.x = u_xlat17 * u_xlat33 + (-u_xlat17);\n    u_xlat17 = u_xlat2.x * u_xlat17 + 1.0;\n    u_xlat33 = u_xlat33 * 0.318309873;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat17 = u_xlat33 / u_xlat17;\n    u_xlat48 = u_xlat48 * u_xlat17;\n    u_xlat48 = u_xlat48 * 3.14159274;\n    u_xlat48 = max(u_xlat48, 9.99999975e-05);\n    u_xlat48 = sqrt(u_xlat48);\n    u_xlat48 = u_xlat1.x * u_xlat48;\n    u_xlat32 = u_xlat32 * u_xlat49;\n    u_xlat32 = (-u_xlat32) * 0.280000001 + 1.0;\n    u_xlat16_60 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_60!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat48 = u_xlat48 * u_xlat1.x;\n    u_xlat16_11 = (-u_xlat16_11) + _Glossiness;\n    u_xlat16_11 = u_xlat16_11 + 1.0;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_30.xyz = _LightColor0.xyz * vec3(u_xlat16) + u_xlat5.xyz;\n    u_xlat1.xyz = vec3(u_xlat48) * _LightColor0.xyz;\n    u_xlat16_60 = (-u_xlat0.x) + 1.0;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_60;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_61;\n    u_xlat16_15.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_15.xyz * vec3(u_xlat16_60) + u_xlat16_12.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_15.xyz;\n    u_xlat0.xyw = u_xlat16_13.xyz * u_xlat16_30.xyz + u_xlat0.xyw;\n    u_xlat16_27.xyz = u_xlat16_27.xyz * vec3(u_xlat32);\n    u_xlat16_13.xyz = (-u_xlat16_12.xyz) + vec3(u_xlat16_11);\n    u_xlat16_12.xyz = vec3(u_xlat16_14) * u_xlat16_13.xyz + u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_27.xyz * u_xlat16_12.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec2 u_xlat2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nlowp vec4 u_xlat10_4;\nmediump float u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_21;\nmediump float u_xlat16_22;\nfloat u_xlat32;\nfloat u_xlat33;\nfloat u_xlat48;\nfloat u_xlat49;\nfloat u_xlat50;\nlowp float u_xlat10_50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_58;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat1.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat49 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat2.x = sqrt(u_xlat49);\n    u_xlat49 = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat2.y = sqrt(u_xlat49);\n    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;\n    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;\n    u_xlat3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat49 = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat50 = sqrt(u_xlat50);\n    u_xlat50 = (-u_xlat49) + u_xlat50;\n    u_xlat49 = unity_ShadowFadeCenterAndType.w * u_xlat50 + u_xlat49;\n    u_xlat49 = u_xlat49 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;\n    u_xlat10_50 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_5 = (-u_xlat10_50) + 1.0;\n    u_xlat16_5 = u_xlat49 * u_xlat16_5 + u_xlat10_50;\n    u_xlat49 = (-_Glossiness) + 1.0;\n    u_xlat16_21.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_21.x = u_xlat16_21.x + u_xlat16_21.x;\n    u_xlat16_21.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_21.xxx) + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_5) * _LightColor0.xyz;\n    u_xlatb50 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb50){\n        u_xlat50 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n        u_xlat50 = inversesqrt(u_xlat50);\n        u_xlat4.xyz = vec3(u_xlat50) * u_xlat16_21.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat50 = min(u_xlat7.z, u_xlat50);\n        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_21.xyz;\n    }\n    u_xlat16_5 = (-u_xlat49) * 0.699999988 + 1.70000005;\n    u_xlat16_5 = u_xlat49 * u_xlat16_5;\n    u_xlat16_5 = u_xlat16_5 * 6.0;\n    u_xlat10_4 = textureCubeLodEXT(unity_SpecCube0, u_xlat4.xyz, u_xlat16_5);\n    u_xlat16_54 = u_xlat10_4.w + -1.0;\n    u_xlat16_54 = unity_SpecCube0_HDR.w * u_xlat16_54 + 1.0;\n    u_xlat16_54 = u_xlat16_54 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat10_4.xyz * vec3(u_xlat16_54);\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat7.xyz = vec3(u_xlat50) * u_xlat16_21.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat50 = min(u_xlat8.z, u_xlat50);\n            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat50) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_21.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_5);\n        u_xlat16_58 = u_xlat10_5.w + -1.0;\n        u_xlat16_58 = unity_SpecCube1_HDR.w * u_xlat16_58 + 1.0;\n        u_xlat16_58 = u_xlat16_58 * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * vec3(u_xlat16_58);\n        u_xlat4.xyz = vec3(u_xlat16_54) * u_xlat10_4.xyz + (-u_xlat16_12.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_12.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat50 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat50 = inversesqrt(u_xlat50);\n    u_xlat4.xyz = vec3(u_xlat50) * vs_TEXCOORD1.xyz;\n    u_xlat16_12.xyz = u_xlat10_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_54 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_13.xyz = u_xlat3.xyz * vec3(u_xlat16_54);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat0.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat48 = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat17 = dot(u_xlat4.xyz, u_xlat0.xyz);\n    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_58 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_58 = u_xlat0.x * u_xlat16_58;\n    u_xlat16_58 = u_xlat16_58 * u_xlat49 + -0.5;\n    u_xlat16_60 = (-u_xlat1.x) + 1.0;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_60;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_61;\n    u_xlat16_60 = u_xlat16_58 * u_xlat16_60 + 1.0;\n    u_xlat16_61 = -abs(u_xlat48) + 1.0;\n    u_xlat16_14.x = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_14.x;\n    u_xlat16_58 = u_xlat16_58 * u_xlat16_61 + 1.0;\n    u_xlat16_58 = u_xlat16_58 * u_xlat16_60;\n    u_xlat16 = u_xlat1.x * u_xlat16_58;\n    u_xlat32 = u_xlat49 * u_xlat49;\n    u_xlat32 = max(u_xlat32, 0.00200000009);\n    u_xlat33 = (-u_xlat32) + 1.0;\n    u_xlat2.x = abs(u_xlat48) * u_xlat33 + u_xlat32;\n    u_xlat33 = u_xlat1.x * u_xlat33 + u_xlat32;\n    u_xlat48 = abs(u_xlat48) * u_xlat33;\n    u_xlat48 = u_xlat1.x * u_xlat2.x + u_xlat48;\n    u_xlat48 = u_xlat48 + 9.99999975e-06;\n    u_xlat48 = 0.5 / u_xlat48;\n    u_xlat33 = u_xlat32 * u_xlat32;\n    u_xlat2.x = u_xlat17 * u_xlat33 + (-u_xlat17);\n    u_xlat17 = u_xlat2.x * u_xlat17 + 1.0;\n    u_xlat33 = u_xlat33 * 0.318309873;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat17 = u_xlat33 / u_xlat17;\n    u_xlat48 = u_xlat48 * u_xlat17;\n    u_xlat48 = u_xlat48 * 3.14159274;\n    u_xlat48 = max(u_xlat48, 9.99999975e-05);\n    u_xlat48 = sqrt(u_xlat48);\n    u_xlat48 = u_xlat1.x * u_xlat48;\n    u_xlat32 = u_xlat32 * u_xlat49;\n    u_xlat32 = (-u_xlat32) * 0.280000001 + 1.0;\n    u_xlat16_58 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_58!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat48 = u_xlat48 * u_xlat1.x;\n    u_xlat16_54 = (-u_xlat16_54) + _Glossiness;\n    u_xlat16_54 = u_xlat16_54 + 1.0;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16) * u_xlat16_6.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz * vec3(u_xlat48);\n    u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_22;\n    u_xlat16_15.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_15.xyz * u_xlat16_6.xxx + u_xlat16_12.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n    u_xlat0.xyw = u_xlat16_13.xyz * u_xlat16_14.xyz + u_xlat0.xyw;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * vec3(u_xlat32);\n    u_xlat16_10.xyz = (-u_xlat16_12.xyz) + vec3(u_xlat16_54);\n    u_xlat16_10.xyz = vec3(u_xlat16_61) * u_xlat16_10.xyz + u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_10.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec2 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec4 u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb9;\nvec3 u_xlat10;\nmediump vec3 u_xlat16_10;\nbvec3 u_xlatb11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_21;\nmediump float u_xlat16_22;\nfloat u_xlat32;\nfloat u_xlat33;\nfloat u_xlat48;\nfloat u_xlat49;\nfloat u_xlat50;\nmediump float u_xlat16_50;\nbool u_xlatb50;\nmediump float u_xlat16_54;\nmediump float u_xlat16_58;\nmediump float u_xlat16_60;\nmediump float u_xlat16_61;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat1.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat49 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat2.x = sqrt(u_xlat49);\n    u_xlat49 = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat2.y = sqrt(u_xlat49);\n    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;\n    u_xlat16_2.xyz = texture(_MainTex, u_xlat2.xy).xyz;\n    u_xlat3.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat49 = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat50 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat50 = sqrt(u_xlat50);\n    u_xlat50 = (-u_xlat49) + u_xlat50;\n    u_xlat49 = unity_ShadowFadeCenterAndType.w * u_xlat50 + u_xlat49;\n    u_xlat49 = u_xlat49 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat49 = clamp(u_xlat49, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;\n    u_xlat16_50 = texture(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_5.x = (-u_xlat16_50) + 1.0;\n    u_xlat16_5.x = u_xlat49 * u_xlat16_5.x + u_xlat16_50;\n    u_xlat49 = (-_Glossiness) + 1.0;\n    u_xlat16_21.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_21.x = u_xlat16_21.x + u_xlat16_21.x;\n    u_xlat16_21.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_21.xxx) + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = u_xlat16_5.xxx * _LightColor0.xyz;\n    u_xlatb50 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb50){\n        u_xlat50 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n        u_xlat50 = inversesqrt(u_xlat50);\n        u_xlat4.xyz = vec3(u_xlat50) * u_xlat16_21.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat4.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat4.xyz;\n        u_xlatb9.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat7;\n            hlslcc_movcTemp.x = (u_xlatb9.x) ? u_xlat7.x : u_xlat8.x;\n            hlslcc_movcTemp.y = (u_xlatb9.y) ? u_xlat7.y : u_xlat8.y;\n            hlslcc_movcTemp.z = (u_xlatb9.z) ? u_xlat7.z : u_xlat8.z;\n            u_xlat7 = hlslcc_movcTemp;\n        }\n        u_xlat50 = min(u_xlat7.y, u_xlat7.x);\n        u_xlat50 = min(u_xlat7.z, u_xlat50);\n        u_xlat7.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat50) + u_xlat7.xyz;\n    } else {\n        u_xlat4.xyz = u_xlat16_21.xyz;\n    }\n    u_xlat16_5.x = (-u_xlat49) * 0.699999988 + 1.70000005;\n    u_xlat16_5.x = u_xlat49 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * 6.0;\n    u_xlat16_4 = textureLod(unity_SpecCube0, u_xlat4.xyz, u_xlat16_5.x);\n    u_xlat16_54 = u_xlat16_4.w + -1.0;\n    u_xlat16_54 = unity_SpecCube0_HDR.w * u_xlat16_54 + 1.0;\n    u_xlat16_54 = u_xlat16_54 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_4.xyz * vec3(u_xlat16_54);\n    u_xlatb50 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb50){\n        u_xlatb50 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb50){\n            u_xlat50 = dot(u_xlat16_21.xyz, u_xlat16_21.xyz);\n            u_xlat50 = inversesqrt(u_xlat50);\n            u_xlat7.xyz = vec3(u_xlat50) * u_xlat16_21.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat50 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat50 = min(u_xlat8.z, u_xlat50);\n            u_xlat8.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat50) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_21.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_5.x);\n        u_xlat16_58 = u_xlat16_5.w + -1.0;\n        u_xlat16_58 = unity_SpecCube1_HDR.w * u_xlat16_58 + 1.0;\n        u_xlat16_58 = u_xlat16_58 * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * vec3(u_xlat16_58);\n        u_xlat4.xyz = vec3(u_xlat16_54) * u_xlat16_4.xyz + (-u_xlat16_12.xyz);\n        u_xlat10.xyz = unity_SpecCube0_BoxMin.www * u_xlat4.xyz + u_xlat16_12.xyz;\n        u_xlat16_10.xyz = u_xlat10.xyz;\n    }\n    u_xlat50 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat50 = inversesqrt(u_xlat50);\n    u_xlat4.xyz = vec3(u_xlat50) * vs_TEXCOORD1.xyz;\n    u_xlat16_12.xyz = u_xlat16_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_12.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_12.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_54 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_13.xyz = u_xlat3.xyz * vec3(u_xlat16_54);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat48) + _WorldSpaceLightPos0.xyz;\n    u_xlat48 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat48 = max(u_xlat48, 0.00100000005);\n    u_xlat48 = inversesqrt(u_xlat48);\n    u_xlat0.xyz = vec3(u_xlat48) * u_xlat0.xyz;\n    u_xlat48 = dot(u_xlat4.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat17 = dot(u_xlat4.xyz, u_xlat0.xyz);\n    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_58 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_58 = u_xlat0.x * u_xlat16_58;\n    u_xlat16_58 = u_xlat16_58 * u_xlat49 + -0.5;\n    u_xlat16_60 = (-u_xlat1.x) + 1.0;\n    u_xlat16_61 = u_xlat16_60 * u_xlat16_60;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_60 = u_xlat16_60 * u_xlat16_61;\n    u_xlat16_60 = u_xlat16_58 * u_xlat16_60 + 1.0;\n    u_xlat16_61 = -abs(u_xlat48) + 1.0;\n    u_xlat16_14.x = u_xlat16_61 * u_xlat16_61;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;\n    u_xlat16_61 = u_xlat16_61 * u_xlat16_14.x;\n    u_xlat16_58 = u_xlat16_58 * u_xlat16_61 + 1.0;\n    u_xlat16_58 = u_xlat16_58 * u_xlat16_60;\n    u_xlat16 = u_xlat1.x * u_xlat16_58;\n    u_xlat32 = u_xlat49 * u_xlat49;\n    u_xlat32 = max(u_xlat32, 0.00200000009);\n    u_xlat33 = (-u_xlat32) + 1.0;\n    u_xlat2.x = abs(u_xlat48) * u_xlat33 + u_xlat32;\n    u_xlat33 = u_xlat1.x * u_xlat33 + u_xlat32;\n    u_xlat48 = abs(u_xlat48) * u_xlat33;\n    u_xlat48 = u_xlat1.x * u_xlat2.x + u_xlat48;\n    u_xlat48 = u_xlat48 + 9.99999975e-06;\n    u_xlat48 = 0.5 / u_xlat48;\n    u_xlat33 = u_xlat32 * u_xlat32;\n    u_xlat2.x = u_xlat17 * u_xlat33 + (-u_xlat17);\n    u_xlat17 = u_xlat2.x * u_xlat17 + 1.0;\n    u_xlat33 = u_xlat33 * 0.318309873;\n    u_xlat17 = u_xlat17 * u_xlat17 + 1.00000001e-07;\n    u_xlat17 = u_xlat33 / u_xlat17;\n    u_xlat48 = u_xlat48 * u_xlat17;\n    u_xlat48 = u_xlat48 * 3.14159274;\n    u_xlat48 = max(u_xlat48, 9.99999975e-05);\n    u_xlat48 = sqrt(u_xlat48);\n    u_xlat48 = u_xlat1.x * u_xlat48;\n    u_xlat32 = u_xlat32 * u_xlat49;\n    u_xlat32 = (-u_xlat32) * 0.280000001 + 1.0;\n    u_xlat16_58 = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);\n    u_xlatb1 = u_xlat16_58!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat48 = u_xlat48 * u_xlat1.x;\n    u_xlat16_54 = (-u_xlat16_54) + _Glossiness;\n    u_xlat16_54 = u_xlat16_54 + 1.0;\n    u_xlat16_54 = clamp(u_xlat16_54, 0.0, 1.0);\n    u_xlat16_14.xyz = vec3(u_xlat16) * u_xlat16_6.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz * vec3(u_xlat48);\n    u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_22;\n    u_xlat16_15.xyz = (-u_xlat16_12.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_15.xyz * u_xlat16_6.xxx + u_xlat16_12.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n    u_xlat0.xyw = u_xlat16_13.xyz * u_xlat16_14.xyz + u_xlat0.xyw;\n    u_xlat16_6.xyz = u_xlat16_10.xyz * vec3(u_xlat32);\n    u_xlat16_10.xyz = (-u_xlat16_12.xyz) + vec3(u_xlat16_54);\n    u_xlat16_10.xyz = vec3(u_xlat16_61) * u_xlat16_10.xyz + u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_10.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat4.zz + u_xlat4.xw;\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec2 u_xlat2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nvec4 u_xlat4;\nmediump float u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nlowp vec4 u_xlat10_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb11;\nvec3 u_xlat12;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nfloat u_xlat18;\nmediump vec3 u_xlat16_22;\nmediump float u_xlat16_23;\nfloat u_xlat34;\nfloat u_xlat35;\nfloat u_xlat51;\nfloat u_xlat52;\nfloat u_xlat53;\nlowp float u_xlat10_53;\nbool u_xlatb53;\nmediump float u_xlat16_57;\nmediump float u_xlat16_63;\nmediump float u_xlat16_64;\nmediump float u_xlat16_65;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat51 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat51 = inversesqrt(u_xlat51);\n    u_xlat1.xyz = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat52 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat2.x = sqrt(u_xlat52);\n    u_xlat52 = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat2.y = sqrt(u_xlat52);\n    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;\n    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat2.xy).xyz;\n    u_xlat3.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat52 = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat53 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat53 = sqrt(u_xlat53);\n    u_xlat53 = (-u_xlat52) + u_xlat53;\n    u_xlat52 = unity_ShadowFadeCenterAndType.w * u_xlat53 + u_xlat52;\n    u_xlat52 = u_xlat52 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;\n    u_xlat10_53 = texture2D(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_5 = (-u_xlat10_53) + 1.0;\n    u_xlat16_5 = u_xlat52 * u_xlat16_5 + u_xlat10_53;\n    u_xlat52 = (-_Glossiness) + 1.0;\n    u_xlat16_22.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;\n    u_xlat16_22.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_22.xxx) + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = vec3(u_xlat16_5) * _LightColor0.xyz;\n    u_xlat4.xyz = vs_TEXCOORD1.xyz;\n    u_xlat4.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_7.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb53 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb53){\n        u_xlat53 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);\n        u_xlat53 = inversesqrt(u_xlat53);\n        u_xlat8.xyz = vec3(u_xlat53) * u_xlat16_22.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat53 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat53 = min(u_xlat9.z, u_xlat53);\n        u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat53) + u_xlat9.xyz;\n    } else {\n        u_xlat8.xyz = u_xlat16_22.xyz;\n    }\n    u_xlat16_5 = (-u_xlat52) * 0.699999988 + 1.70000005;\n    u_xlat16_5 = u_xlat52 * u_xlat16_5;\n    u_xlat16_5 = u_xlat16_5 * 6.0;\n    u_xlat10_7 = textureCubeLodEXT(unity_SpecCube0, u_xlat8.xyz, u_xlat16_5);\n    u_xlat16_57 = u_xlat10_7.w + -1.0;\n    u_xlat16_57 = unity_SpecCube0_HDR.w * u_xlat16_57 + 1.0;\n    u_xlat16_57 = u_xlat16_57 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat10_7.xyz * vec3(u_xlat16_57);\n    u_xlatb53 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb53){\n        u_xlatb53 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb53){\n            u_xlat53 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);\n            u_xlat53 = inversesqrt(u_xlat53);\n            u_xlat8.xyz = vec3(u_xlat53) * u_xlat16_22.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n            }\n            u_xlat53 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat53 = min(u_xlat9.z, u_xlat53);\n            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat53) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz = u_xlat16_22.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat8.xyz, u_xlat16_5);\n        u_xlat16_63 = u_xlat10_5.w + -1.0;\n        u_xlat16_63 = unity_SpecCube1_HDR.w * u_xlat16_63 + 1.0;\n        u_xlat16_63 = u_xlat16_63 * unity_SpecCube1_HDR.x;\n        u_xlat16_13.xyz = u_xlat10_5.xyz * vec3(u_xlat16_63);\n        u_xlat8.xyz = vec3(u_xlat16_57) * u_xlat10_7.xyz + (-u_xlat16_13.xyz);\n        u_xlat12.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat16_13.xyz;\n        u_xlat16_12.xyz = u_xlat12.xyz;\n    }\n    u_xlat53 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat53 = inversesqrt(u_xlat53);\n    u_xlat8.xyz = vec3(u_xlat53) * vs_TEXCOORD1.xyz;\n    u_xlat16_13.xyz = u_xlat10_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_57 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_14.xyz = u_xlat3.xyz * vec3(u_xlat16_57);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat51) + _WorldSpaceLightPos0.xyz;\n    u_xlat51 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat51 = max(u_xlat51, 0.00100000005);\n    u_xlat51 = inversesqrt(u_xlat51);\n    u_xlat0.xyz = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat51 = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat18 = dot(u_xlat8.xyz, u_xlat0.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_63 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_63 = u_xlat0.x * u_xlat16_63;\n    u_xlat16_63 = u_xlat16_63 * u_xlat52 + -0.5;\n    u_xlat16_64 = (-u_xlat1.x) + 1.0;\n    u_xlat16_65 = u_xlat16_64 * u_xlat16_64;\n    u_xlat16_65 = u_xlat16_65 * u_xlat16_65;\n    u_xlat16_64 = u_xlat16_64 * u_xlat16_65;\n    u_xlat16_64 = u_xlat16_63 * u_xlat16_64 + 1.0;\n    u_xlat16_65 = -abs(u_xlat51) + 1.0;\n    u_xlat16_15.x = u_xlat16_65 * u_xlat16_65;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;\n    u_xlat16_65 = u_xlat16_65 * u_xlat16_15.x;\n    u_xlat16_63 = u_xlat16_63 * u_xlat16_65 + 1.0;\n    u_xlat16_63 = u_xlat16_63 * u_xlat16_64;\n    u_xlat17 = u_xlat1.x * u_xlat16_63;\n    u_xlat34 = u_xlat52 * u_xlat52;\n    u_xlat34 = max(u_xlat34, 0.00200000009);\n    u_xlat35 = (-u_xlat34) + 1.0;\n    u_xlat2.x = abs(u_xlat51) * u_xlat35 + u_xlat34;\n    u_xlat35 = u_xlat1.x * u_xlat35 + u_xlat34;\n    u_xlat51 = abs(u_xlat51) * u_xlat35;\n    u_xlat51 = u_xlat1.x * u_xlat2.x + u_xlat51;\n    u_xlat51 = u_xlat51 + 9.99999975e-06;\n    u_xlat51 = 0.5 / u_xlat51;\n    u_xlat35 = u_xlat34 * u_xlat34;\n    u_xlat2.x = u_xlat18 * u_xlat35 + (-u_xlat18);\n    u_xlat18 = u_xlat2.x * u_xlat18 + 1.0;\n    u_xlat35 = u_xlat35 * 0.318309873;\n    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;\n    u_xlat18 = u_xlat35 / u_xlat18;\n    u_xlat51 = u_xlat51 * u_xlat18;\n    u_xlat51 = u_xlat51 * 3.14159274;\n    u_xlat51 = max(u_xlat51, 9.99999975e-05);\n    u_xlat51 = sqrt(u_xlat51);\n    u_xlat51 = u_xlat1.x * u_xlat51;\n    u_xlat34 = u_xlat34 * u_xlat52;\n    u_xlat34 = (-u_xlat34) * 0.280000001 + 1.0;\n    u_xlat16_63 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb1 = u_xlat16_63!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat51 = u_xlat51 * u_xlat1.x;\n    u_xlat16_57 = (-u_xlat16_57) + _Glossiness;\n    u_xlat16_57 = u_xlat16_57 + 1.0;\n    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_6.xyz * vec3(u_xlat17) + u_xlat4.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz * vec3(u_xlat51);\n    u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_23 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_23;\n    u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_13.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n    u_xlat0.xyw = u_xlat16_14.xyz * u_xlat16_15.xyz + u_xlat0.xyw;\n    u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat34);\n    u_xlat16_12.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_57);\n    u_xlat16_12.xyz = vec3(u_xlat16_65) * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_12.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat16;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat16 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat16 = inversesqrt(u_xlat16);\n    u_xlat1.xyz = vec3(u_xlat16) * u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz;\n    u_xlat16_2 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2 = u_xlat1.x * u_xlat1.x + (-u_xlat16_2);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD3.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat4.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat4.zz + u_xlat4.xw;\n    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nbool u_xlatb1;\nvec2 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec4 u_xlat4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec4 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nvec3 u_xlat10;\nbvec3 u_xlatb11;\nvec3 u_xlat12;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nmediump vec3 u_xlat16_15;\nmediump vec3 u_xlat16_16;\nfloat u_xlat17;\nfloat u_xlat18;\nmediump vec3 u_xlat16_22;\nmediump float u_xlat16_23;\nfloat u_xlat34;\nfloat u_xlat35;\nfloat u_xlat51;\nfloat u_xlat52;\nfloat u_xlat53;\nmediump float u_xlat16_53;\nbool u_xlatb53;\nmediump float u_xlat16_57;\nmediump float u_xlat16_63;\nmediump float u_xlat16_64;\nmediump float u_xlat16_65;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat51 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat51 = inversesqrt(u_xlat51);\n    u_xlat1.xyz = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat52 = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat2.x = sqrt(u_xlat52);\n    u_xlat52 = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat2.y = sqrt(u_xlat52);\n    u_xlat2.xy = u_xlat2.xy * vs_TEXCOORD0.xy;\n    u_xlat16_2.xyz = texture(_MainTex, u_xlat2.xy).xyz;\n    u_xlat3.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat4.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat4.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat4.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat52 = dot(u_xlat0.xyz, u_xlat4.xyz);\n    u_xlat4.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat53 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat53 = sqrt(u_xlat53);\n    u_xlat53 = (-u_xlat52) + u_xlat53;\n    u_xlat52 = unity_ShadowFadeCenterAndType.w * u_xlat53 + u_xlat52;\n    u_xlat52 = u_xlat52 * _LightShadowData.z + _LightShadowData.w;\n    u_xlat52 = clamp(u_xlat52, 0.0, 1.0);\n    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;\n    u_xlat16_53 = texture(_ShadowMapTexture, u_xlat4.xy).x;\n    u_xlat16_5.x = (-u_xlat16_53) + 1.0;\n    u_xlat16_5.x = u_xlat52 * u_xlat16_5.x + u_xlat16_53;\n    u_xlat52 = (-_Glossiness) + 1.0;\n    u_xlat16_22.x = dot((-u_xlat1.xyz), vs_TEXCOORD1.xyz);\n    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;\n    u_xlat16_22.xyz = vs_TEXCOORD1.xyz * (-u_xlat16_22.xxx) + (-u_xlat1.xyz);\n    u_xlat16_6.xyz = u_xlat16_5.xxx * _LightColor0.xyz;\n    u_xlat4.xyz = vs_TEXCOORD1.xyz;\n    u_xlat4.w = 1.0;\n    u_xlat16_7.x = dot(unity_SHAr, u_xlat4);\n    u_xlat16_7.y = dot(unity_SHAg, u_xlat4);\n    u_xlat16_7.z = dot(unity_SHAb, u_xlat4);\n    u_xlat16_7.xyz = u_xlat16_7.xyz + vs_TEXCOORD3.xyz;\n    u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat4.xyz = log2(u_xlat16_7.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat4.xyz = exp2(u_xlat4.xyz);\n    u_xlat4.xyz = u_xlat4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat4.xyz = max(u_xlat4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb53 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb53){\n        u_xlat53 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);\n        u_xlat53 = inversesqrt(u_xlat53);\n        u_xlat8.xyz = vec3(u_xlat53) * u_xlat16_22.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n        u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n        u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat9;\n            hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n            hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n            hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n            u_xlat9 = hlslcc_movcTemp;\n        }\n        u_xlat53 = min(u_xlat9.y, u_xlat9.x);\n        u_xlat53 = min(u_xlat9.z, u_xlat53);\n        u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat53) + u_xlat9.xyz;\n    } else {\n        u_xlat8.xyz = u_xlat16_22.xyz;\n    }\n    u_xlat16_5.x = (-u_xlat52) * 0.699999988 + 1.70000005;\n    u_xlat16_5.x = u_xlat52 * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * 6.0;\n    u_xlat16_7 = textureLod(unity_SpecCube0, u_xlat8.xyz, u_xlat16_5.x);\n    u_xlat16_57 = u_xlat16_7.w + -1.0;\n    u_xlat16_57 = unity_SpecCube0_HDR.w * u_xlat16_57 + 1.0;\n    u_xlat16_57 = u_xlat16_57 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_57);\n    u_xlatb53 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb53){\n        u_xlatb53 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb53){\n            u_xlat53 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);\n            u_xlat53 = inversesqrt(u_xlat53);\n            u_xlat8.xyz = vec3(u_xlat53) * u_xlat16_22.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat8.xyz;\n            u_xlat10.xyz = (-vs_TEXCOORD2.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat10.xyz = u_xlat10.xyz / u_xlat8.xyz;\n            u_xlatb11.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat8.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat9;\n                hlslcc_movcTemp.x = (u_xlatb11.x) ? u_xlat9.x : u_xlat10.x;\n                hlslcc_movcTemp.y = (u_xlatb11.y) ? u_xlat9.y : u_xlat10.y;\n                hlslcc_movcTemp.z = (u_xlatb11.z) ? u_xlat9.z : u_xlat10.z;\n                u_xlat9 = hlslcc_movcTemp;\n            }\n            u_xlat53 = min(u_xlat9.y, u_xlat9.x);\n            u_xlat53 = min(u_xlat9.z, u_xlat53);\n            u_xlat9.xyz = vs_TEXCOORD2.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat8.xyz = u_xlat8.xyz * vec3(u_xlat53) + u_xlat9.xyz;\n        } else {\n            u_xlat8.xyz = u_xlat16_22.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat8.xyz, u_xlat16_5.x);\n        u_xlat16_63 = u_xlat16_5.w + -1.0;\n        u_xlat16_63 = unity_SpecCube1_HDR.w * u_xlat16_63 + 1.0;\n        u_xlat16_63 = u_xlat16_63 * unity_SpecCube1_HDR.x;\n        u_xlat16_13.xyz = u_xlat16_5.xyz * vec3(u_xlat16_63);\n        u_xlat8.xyz = vec3(u_xlat16_57) * u_xlat16_7.xyz + (-u_xlat16_13.xyz);\n        u_xlat12.xyz = unity_SpecCube0_BoxMin.www * u_xlat8.xyz + u_xlat16_13.xyz;\n        u_xlat16_12.xyz = u_xlat12.xyz;\n    }\n    u_xlat53 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat53 = inversesqrt(u_xlat53);\n    u_xlat8.xyz = vec3(u_xlat53) * vs_TEXCOORD1.xyz;\n    u_xlat16_13.xyz = u_xlat16_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_57 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_14.xyz = u_xlat3.xyz * vec3(u_xlat16_57);\n    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat51) + _WorldSpaceLightPos0.xyz;\n    u_xlat51 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat51 = max(u_xlat51, 0.00100000005);\n    u_xlat51 = inversesqrt(u_xlat51);\n    u_xlat0.xyz = vec3(u_xlat51) * u_xlat0.xyz;\n    u_xlat51 = dot(u_xlat8.xyz, u_xlat1.xyz);\n    u_xlat1.x = dot(u_xlat8.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat18 = dot(u_xlat8.xyz, u_xlat0.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_63 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_63 = u_xlat0.x * u_xlat16_63;\n    u_xlat16_63 = u_xlat16_63 * u_xlat52 + -0.5;\n    u_xlat16_64 = (-u_xlat1.x) + 1.0;\n    u_xlat16_65 = u_xlat16_64 * u_xlat16_64;\n    u_xlat16_65 = u_xlat16_65 * u_xlat16_65;\n    u_xlat16_64 = u_xlat16_64 * u_xlat16_65;\n    u_xlat16_64 = u_xlat16_63 * u_xlat16_64 + 1.0;\n    u_xlat16_65 = -abs(u_xlat51) + 1.0;\n    u_xlat16_15.x = u_xlat16_65 * u_xlat16_65;\n    u_xlat16_15.x = u_xlat16_15.x * u_xlat16_15.x;\n    u_xlat16_65 = u_xlat16_65 * u_xlat16_15.x;\n    u_xlat16_63 = u_xlat16_63 * u_xlat16_65 + 1.0;\n    u_xlat16_63 = u_xlat16_63 * u_xlat16_64;\n    u_xlat17 = u_xlat1.x * u_xlat16_63;\n    u_xlat34 = u_xlat52 * u_xlat52;\n    u_xlat34 = max(u_xlat34, 0.00200000009);\n    u_xlat35 = (-u_xlat34) + 1.0;\n    u_xlat2.x = abs(u_xlat51) * u_xlat35 + u_xlat34;\n    u_xlat35 = u_xlat1.x * u_xlat35 + u_xlat34;\n    u_xlat51 = abs(u_xlat51) * u_xlat35;\n    u_xlat51 = u_xlat1.x * u_xlat2.x + u_xlat51;\n    u_xlat51 = u_xlat51 + 9.99999975e-06;\n    u_xlat51 = 0.5 / u_xlat51;\n    u_xlat35 = u_xlat34 * u_xlat34;\n    u_xlat2.x = u_xlat18 * u_xlat35 + (-u_xlat18);\n    u_xlat18 = u_xlat2.x * u_xlat18 + 1.0;\n    u_xlat35 = u_xlat35 * 0.318309873;\n    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;\n    u_xlat18 = u_xlat35 / u_xlat18;\n    u_xlat51 = u_xlat51 * u_xlat18;\n    u_xlat51 = u_xlat51 * 3.14159274;\n    u_xlat51 = max(u_xlat51, 9.99999975e-05);\n    u_xlat51 = sqrt(u_xlat51);\n    u_xlat51 = u_xlat1.x * u_xlat51;\n    u_xlat34 = u_xlat34 * u_xlat52;\n    u_xlat34 = (-u_xlat34) * 0.280000001 + 1.0;\n    u_xlat16_63 = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb1 = u_xlat16_63!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat51 = u_xlat51 * u_xlat1.x;\n    u_xlat16_57 = (-u_xlat16_57) + _Glossiness;\n    u_xlat16_57 = u_xlat16_57 + 1.0;\n    u_xlat16_57 = clamp(u_xlat16_57, 0.0, 1.0);\n    u_xlat16_15.xyz = u_xlat16_6.xyz * vec3(u_xlat17) + u_xlat4.xyz;\n    u_xlat1.xyz = u_xlat16_6.xyz * vec3(u_xlat51);\n    u_xlat16_6.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_23 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_23;\n    u_xlat16_16.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_13.xyz;\n    u_xlat0.xyw = u_xlat1.xyz * u_xlat16_6.xyz;\n    u_xlat0.xyw = u_xlat16_14.xyz * u_xlat16_15.xyz + u_xlat0.xyw;\n    u_xlat16_6.xyz = u_xlat16_12.xyz * vec3(u_xlat34);\n    u_xlat16_12.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_57);\n    u_xlat16_12.xyz = vec3(u_xlat16_65) * u_xlat16_12.xyz + u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_12.xyz + u_xlat0.xyw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nmediump float u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec2 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat20;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 0.00100000005);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat13 = u_xlat7 * u_xlat7;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat19 = u_xlat13 * u_xlat13;\n    u_xlat20 = u_xlat18 * u_xlat19 + (-u_xlat18);\n    u_xlat18 = u_xlat20 * u_xlat18 + 1.0;\n    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;\n    u_xlat19 = u_xlat19 * 0.318309873;\n    u_xlat18 = u_xlat19 / u_xlat18;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat6 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12.x = (-u_xlat13) + 1.0;\n    u_xlat19 = abs(u_xlat0.x) * u_xlat12.x + u_xlat13;\n    u_xlat12.x = u_xlat6 * u_xlat12.x + u_xlat13;\n    u_xlat12.x = u_xlat12.x * abs(u_xlat0.x);\n    u_xlat16_3 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat6 * u_xlat19 + u_xlat12.x;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat18 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    u_xlat12.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat2.x = sqrt(u_xlat12.x);\n    u_xlat12.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat2.y = sqrt(u_xlat12.x);\n    u_xlat12.xy = u_xlat2.xy * vs_TEXCOORD0.xy;\n    u_xlat10_2.xyz = texture2D(_MainTex, u_xlat12.xy).xyz;\n    u_xlat16_9.xyz = u_xlat10_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_4.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb12 = u_xlat16_4.x!=0.0;\n    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat12.x * u_xlat0.x;\n    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_22 = (-u_xlat1.x) + 1.0;\n    u_xlat16_5 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5;\n    u_xlat16_9.xyz = u_xlat16_4.xyz * vec3(u_xlat16_22) + u_xlat16_9.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_9.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat16_9.xxx;\n    u_xlat16_4.x = u_xlat16_3 * u_xlat16_3;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat1.x + u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat7 + -0.5;\n    u_xlat16_3 = u_xlat16_4.x * u_xlat16_3 + 1.0;\n    u_xlat16_10 = (-u_xlat6) + 1.0;\n    u_xlat16_16 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_16;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10 + 1.0;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_4.x;\n    u_xlat6 = u_xlat6 * u_xlat16_3;\n    u_xlat16_4.xyz = vec3(u_xlat6) * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD1.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nmediump float u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump float u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_9;\nmediump float u_xlat16_10;\nvec2 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat20;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat18) + _WorldSpaceLightPos0.xyz;\n    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;\n    u_xlat18 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat18 = max(u_xlat18, 0.00100000005);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat2.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);\n    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat13 = u_xlat7 * u_xlat7;\n    u_xlat13 = max(u_xlat13, 0.00200000009);\n    u_xlat19 = u_xlat13 * u_xlat13;\n    u_xlat20 = u_xlat18 * u_xlat19 + (-u_xlat18);\n    u_xlat18 = u_xlat20 * u_xlat18 + 1.0;\n    u_xlat18 = u_xlat18 * u_xlat18 + 1.00000001e-07;\n    u_xlat19 = u_xlat19 * 0.318309873;\n    u_xlat18 = u_xlat19 / u_xlat18;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat6 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12.x = (-u_xlat13) + 1.0;\n    u_xlat19 = abs(u_xlat0.x) * u_xlat12.x + u_xlat13;\n    u_xlat12.x = u_xlat6 * u_xlat12.x + u_xlat13;\n    u_xlat12.x = u_xlat12.x * abs(u_xlat0.x);\n    u_xlat16_3 = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat6 * u_xlat19 + u_xlat12.x;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat18 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    u_xlat12.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat2.x = sqrt(u_xlat12.x);\n    u_xlat12.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat2.y = sqrt(u_xlat12.x);\n    u_xlat12.xy = u_xlat2.xy * vs_TEXCOORD0.xy;\n    u_xlat16_2.xyz = texture(_MainTex, u_xlat12.xy).xyz;\n    u_xlat16_9.xyz = u_xlat16_2.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_4.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb12 = u_xlat16_4.x!=0.0;\n    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat12.x * u_xlat0.x;\n    u_xlat0.xzw = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_4.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_22 = (-u_xlat1.x) + 1.0;\n    u_xlat16_5 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_5 = u_xlat16_5 * u_xlat16_5;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_5;\n    u_xlat16_9.xyz = u_xlat16_4.xyz * vec3(u_xlat16_22) + u_xlat16_9.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_9.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat2.xyz * u_xlat16_9.xxx;\n    u_xlat16_4.x = u_xlat16_3 * u_xlat16_3;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat1.x + u_xlat1.x;\n    u_xlat16_4.x = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat7 + -0.5;\n    u_xlat16_3 = u_xlat16_4.x * u_xlat16_3 + 1.0;\n    u_xlat16_10 = (-u_xlat6) + 1.0;\n    u_xlat16_16 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_16;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10 + 1.0;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_4.x;\n    u_xlat6 = u_xlat6 * u_xlat16_3;\n    u_xlat16_4.xyz = vec3(u_xlat6) * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD4.zw = u_xlat0.zw;\n    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _ShadowMapTexture;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec2 u_xlat7;\nlowp float u_xlat10_7;\nfloat u_xlat8;\nvec3 u_xlat9;\nlowp vec3 u_xlat10_9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_13;\nvec2 u_xlat15;\nbool u_xlatb15;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat22;\nfloat u_xlat23;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat8 = (-_Glossiness) + 1.0;\n    u_xlat15.x = u_xlat8 * u_xlat8;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat22 = u_xlat15.x * u_xlat15.x;\n    u_xlat23 = u_xlat21 * u_xlat22 + (-u_xlat21);\n    u_xlat21 = u_xlat23 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat22 = u_xlat22 * 0.318309873;\n    u_xlat21 = u_xlat22 / u_xlat21;\n    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat2.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat9.x = (-u_xlat15.x) + 1.0;\n    u_xlat16 = abs(u_xlat22) * u_xlat9.x + u_xlat15.x;\n    u_xlat15.x = u_xlat2.x * u_xlat9.x + u_xlat15.x;\n    u_xlat15.x = u_xlat15.x * abs(u_xlat22);\n    u_xlat16_4 = -abs(u_xlat22) + 1.0;\n    u_xlat15.x = u_xlat2.x * u_xlat16 + u_xlat15.x;\n    u_xlat15.x = u_xlat15.x + 9.99999975e-06;\n    u_xlat15.x = 0.5 / u_xlat15.x;\n    u_xlat21 = u_xlat21 * u_xlat15.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat2.x * u_xlat21;\n    u_xlat15.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat3.x = sqrt(u_xlat15.x);\n    u_xlat15.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat3.y = sqrt(u_xlat15.x);\n    u_xlat15.xy = u_xlat3.xy * vs_TEXCOORD0.xy;\n    u_xlat10_9.xyz = texture2D(_MainTex, u_xlat15.xy).xyz;\n    u_xlat16_11.xyz = u_xlat10_9.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat9.xyz = u_xlat10_9.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb15 = u_xlat16_5.x!=0.0;\n    u_xlat15.x = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat15.x;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;\n    u_xlat10_7 = texture2D(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_5.x = (-u_xlat10_7) + 1.0;\n    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x + u_xlat10_7;\n    u_xlat16_5.xyz = u_xlat16_5.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat16_5.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_26 = (-u_xlat1.x) + 1.0;\n    u_xlat16_27 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_27;\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xyz;\n    u_xlat16_11.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_11.xyz = u_xlat9.xyz * u_xlat16_11.xxx;\n    u_xlat16_26 = u_xlat16_4 * u_xlat16_4;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_26;\n    u_xlat16_26 = u_xlat1.x + u_xlat1.x;\n    u_xlat16_26 = u_xlat1.x * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat8 + -0.5;\n    u_xlat16_4 = u_xlat16_26 * u_xlat16_4 + 1.0;\n    u_xlat16_6.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_13;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x + 1.0;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_26;\n    u_xlat21 = u_xlat2.x * u_xlat16_4;\n    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_11.xyz * u_xlat16_5.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD4;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;\n    gl_Position = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD1.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD4.zw = u_xlat0.zw;\n    vs_TEXCOORD4.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 _LightShadowData;\nuniform \tvec4 unity_ShadowFadeCenterAndType;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Glossiness;\nuniform \tmediump float _Metallic;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _ShadowMapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump float u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec2 u_xlat7;\nmediump float u_xlat16_7;\nfloat u_xlat8;\nvec3 u_xlat9;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_13;\nvec2 u_xlat15;\nbool u_xlatb15;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat22;\nfloat u_xlat23;\nmediump float u_xlat16_26;\nmediump float u_xlat16_27;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = u_xlat0.xyz * vec3(u_xlat21) + _WorldSpaceLightPos0.xyz;\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat0.xyz;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat1.x = dot(_WorldSpaceLightPos0.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat8 = (-_Glossiness) + 1.0;\n    u_xlat15.x = u_xlat8 * u_xlat8;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat22 = u_xlat15.x * u_xlat15.x;\n    u_xlat23 = u_xlat21 * u_xlat22 + (-u_xlat21);\n    u_xlat21 = u_xlat23 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat22 = u_xlat22 * 0.318309873;\n    u_xlat21 = u_xlat22 / u_xlat21;\n    u_xlat22 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat2.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat9.x = (-u_xlat15.x) + 1.0;\n    u_xlat16 = abs(u_xlat22) * u_xlat9.x + u_xlat15.x;\n    u_xlat15.x = u_xlat2.x * u_xlat9.x + u_xlat15.x;\n    u_xlat15.x = u_xlat15.x * abs(u_xlat22);\n    u_xlat16_4 = -abs(u_xlat22) + 1.0;\n    u_xlat15.x = u_xlat2.x * u_xlat16 + u_xlat15.x;\n    u_xlat15.x = u_xlat15.x + 9.99999975e-06;\n    u_xlat15.x = 0.5 / u_xlat15.x;\n    u_xlat21 = u_xlat21 * u_xlat15.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat2.x * u_xlat21;\n    u_xlat15.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);\n    u_xlat3.x = sqrt(u_xlat15.x);\n    u_xlat15.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);\n    u_xlat3.y = sqrt(u_xlat15.x);\n    u_xlat15.xy = u_xlat3.xy * vs_TEXCOORD0.xy;\n    u_xlat16_9.xyz = texture(_MainTex, u_xlat15.xy).xyz;\n    u_xlat16_11.xyz = u_xlat16_9.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat9.xyz = u_xlat16_9.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb15 = u_xlat16_5.x!=0.0;\n    u_xlat15.x = u_xlatb15 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat15.x;\n    u_xlat3.x = hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat3.y = hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat3.z = hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat3.xyz = vs_TEXCOORD2.xyz + (-unity_ShadowFadeCenterAndType.xyz);\n    u_xlat7.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat7.x = sqrt(u_xlat7.x);\n    u_xlat7.x = (-u_xlat0.x) + u_xlat7.x;\n    u_xlat0.x = unity_ShadowFadeCenterAndType.w * u_xlat7.x + u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * _LightShadowData.z + _LightShadowData.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;\n    u_xlat16_7 = texture(_ShadowMapTexture, u_xlat7.xy).x;\n    u_xlat16_5.x = (-u_xlat16_7) + 1.0;\n    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x + u_xlat16_7;\n    u_xlat16_5.xyz = u_xlat16_5.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = vec3(u_xlat21) * u_xlat16_5.xyz;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_26 = (-u_xlat1.x) + 1.0;\n    u_xlat16_27 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_27;\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_11.xyz;\n    u_xlat16_11.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_11.xyz = u_xlat9.xyz * u_xlat16_11.xxx;\n    u_xlat16_26 = u_xlat16_4 * u_xlat16_4;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_26;\n    u_xlat16_26 = u_xlat1.x + u_xlat1.x;\n    u_xlat16_26 = u_xlat1.x * u_xlat16_26;\n    u_xlat16_26 = u_xlat16_26 * u_xlat8 + -0.5;\n    u_xlat16_4 = u_xlat16_26 * u_xlat16_4 + 1.0;\n    u_xlat16_6.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_13 = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_13;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x + 1.0;\n    u_xlat16_4 = u_xlat16_4 * u_xlat16_26;\n    u_xlat21 = u_xlat2.x * u_xlat16_4;\n    u_xlat16_5.xyz = vec3(u_xlat21) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_11.xyz * u_xlat16_5.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"]